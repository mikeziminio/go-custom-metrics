// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package server

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/mikeziminio/go-custom-metrics/internal/model"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockStorage
func (_mock *MockStorage) Get(metricType model.MetricType, metricName string) (*model.Metric, error) {
	ret := _mock.Called(metricType, metricName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Metric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.MetricType, string) (*model.Metric, error)); ok {
		return returnFunc(metricType, metricName)
	}
	if returnFunc, ok := ret.Get(0).(func(model.MetricType, string) *model.Metric); ok {
		r0 = returnFunc(metricType, metricName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Metric)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(model.MetricType, string) error); ok {
		r1 = returnFunc(metricType, metricName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - metricType model.MetricType
//   - metricName string
func (_e *MockStorage_Expecter) Get(metricType interface{}, metricName interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", metricType, metricName)}
}

func (_c *MockStorage_Get_Call) Run(run func(metricType model.MetricType, metricName string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.MetricType
		if args[0] != nil {
			arg0 = args[0].(model.MetricType)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(metric *model.Metric, err error) *MockStorage_Get_Call {
	_c.Call.Return(metric, err)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(metricType model.MetricType, metricName string) (*model.Metric, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockStorage
func (_mock *MockStorage) List() map[string]model.Metric {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 map[string]model.Metric
	if returnFunc, ok := ret.Get(0).(func() map[string]model.Metric); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.Metric)
		}
	}
	return r0
}

// MockStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockStorage_Expecter) List() *MockStorage_List_Call {
	return &MockStorage_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockStorage_List_Call) Run(run func()) *MockStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_List_Call) Return(stringToMetric map[string]model.Metric) *MockStorage_List_Call {
	_c.Call.Return(stringToMetric)
	return _c
}

func (_c *MockStorage_List_Call) RunAndReturn(run func() map[string]model.Metric) *MockStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockStorage
func (_mock *MockStorage) Update(m model.Metric) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.Metric) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - m model.Metric
func (_e *MockStorage_Expecter) Update(m interface{}) *MockStorage_Update_Call {
	return &MockStorage_Update_Call{Call: _e.mock.On("Update", m)}
}

func (_c *MockStorage_Update_Call) Run(run func(m model.Metric)) *MockStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Metric
		if args[0] != nil {
			arg0 = args[0].(model.Metric)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_Update_Call) Return(err error) *MockStorage_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Update_Call) RunAndReturn(run func(m model.Metric) error) *MockStorage_Update_Call {
	_c.Call.Return(run)
	return _c
}
